17:52 2019/1/4  结合视频

游戏肯定会用第三方开源库了 我们ida分析游戏的dump内存 为了让ida能识别出第三方开源库的函数 我们需要先确定这个游戏用了
哪些第三方开源库 
可以ida 拖进dump 分析完毕 查看字符串窗口 找关键敏感词 比如发现lua 那么自己去官网下载源码 完后自己编译啊 
编译器参数不一样 编译后的特征码也不一样 
ida有个功能很强大 就是匹配特征码 只要发现某块指令和他的sig库里面任何一个sig文件匹配上 就会显示对应的函数 
至于sig到底是啥 其实就是特征码对应的函数名 函数原型包装起来了 
刚才提到了编译的参数不一样 导致生成的lib二进制特征也不一样 所以需要暴力穷举编译 生成n多lib文件 
完后利用ida的工具包plf.exe去把对应的lib文件生成.pat文件 最后利用sigmake.exe把pat转换为sig文件就完工了
当然转换失败 可以尝试手动修复pat文件再次转换
具体不懂就去看《ida权威指南》相关章节吧 或者看看本教程附带文档的说明书 
我都注释好了 还是看不懂 就用我开发的SigMaker2.0吧 傻瓜式说明 

1,把sigmake.exe所在的文件夹拷贝到计算机环境变量path里去 把SigMaker从debug文件夹拷贝到lua源码文件夹里 注意不能和源码放在一起
必须是上层文件夹 启动后 第一个是编译生成一堆lib文件 第二个是生成sig文件 它会先把lib转换为pat 再转换为sig 如果转换失败就需要
第三个选项修复pat了 第三个是修复pat 第四个是如果已经存在pat文件 就直接从pat转换成sig 

2,因为我们需要先编译lua源码 生成一堆lib文件 所以这里选择0 注意啊 编译过程很长很长 如果你等不及了 可以直接关闭窗口 按照提示
先把vs命令行文件夹找到 完后右键选择属性 查看目标 复制出来 拷贝到窗口里 完后回车 完后按照提示 复制lua源码路径进去 再回车
就开始工作了 很漫长 代码需要优化 自己弄去吧 如果直接关闭也可以 但是编译过程中残留的obj系列文件没有清理干净 自己弄去吧 太久了 等不及了
这里为了演示 就提前关闭了 很短时间 生成这么多

3，好了 这里一堆lib就是刚才编译好的 后面数字表示 都是按照不同编译选项编译的 完后需要关闭SigMaker2.0 再次打开 选择1 按照上面
说的 复制进去路径 回车后 开始工作 生成sig 当然我这里提供了lib2sig.bat 也实现了这个功能 没多大区别 貌似比我的SigMaker2.0用起来
稍微舒服一点 lib2sig.bat和源码放在一起 完后vs命令行工具 进入这个文件夹 输入lib2sig 回车就能运行了 
注意 这里的文件夹是错误的矛盾冲突的exc文件 是需要你自己手动修复的 自动修复失败了 这个是错误的lib 
这个是生成pat的时候发生冲突的pat文件 这个是临时的文件 用来生成sig的 这个是sig文件夹 生成好的

4,最后如果有需要修复的pat文件 需要手动修复了 因为SigMaker2.0生成sig的过程中已经尝试自动修复了 只是把;结尾的语句删除了 没处理特征码一样的情况 
看到了吧 这种冲突就是因为发现两个函数特征码都一样啊 sigmake工具不能自己选择 需要你自己选择到底用哪个函数 你可以在我代码基础上完善 
随机选择一个 删除另外一个 所以自己完善吧 或者可以手动删除掉多余的行 完后sigmake吧 具体怎么修复 去看ida权威指南和我的说明书注释版吧


5,至于非第三方的库 比如微软自家的 又不开源 所以非常简单 直接把他们的lib转换为sig就完事 不需要改变编译器参数编译成一堆lib 
可以考虑购买磁盘阵列+python脚本写个爬虫 自动从网络下载各种开源第三方库 自动编译 自动制造sig 
而且你的sig可以出售哦 比如国外某网站专门提供这个服务 全系列各种版本的sig他们都有 售价不菲 谢谢观看 再见

